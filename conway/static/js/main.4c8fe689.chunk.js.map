{"version":3,"sources":["components/Bunny.jsx","shared/constants.js","components/Grass.jsx","components/Bomb.jsx","lib/grid.js","components/Main.jsx","components/Explain.jsx","App.js","serviceWorker.js","index.js"],"names":["Bunny","props","src","className","onClick","row","col","Grass","Bomb","randomKey","Math","floor","random","toString","state","source","setTimeout","setState","this","Component","isAlive","cell","grid","size","length","newCell","count","neighborCount","nextGrid","originalGrid","rows","cols","fields","push","Main","initialGrid","copyGrid","oldGrid","newGrid","updateTile","status","tile","rowTiles","tiles","map","gridTiles","index","nextGeneration","event","color","Explain","toggle","prevState","modal","buttonLabel","isOpen","href","target","controls","style","display","height","width","App","dark","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4c8fe689.chunk.js","sourcesContent":["import React from 'react'\nimport { EMPTY } from '../shared/constants'\n\n\nconst Bunny = (props) => {\n  return (\n    <img src=\"./bunny.gif\" className=\"tile\" onClick={() => {props.onClick(props.row, props.col, EMPTY)}} />\n  )\n}\n\nexport default Bunny\n","export const EMPTY = 0\nexport const OCCUPIED = 1\nexport const EXPLODED = 2","import React from 'react'\nimport { OCCUPIED } from '../shared/constants'\n\nconst Grass = (props) => {\n  return (\n    <img src=\"./grass.gif\" className=\"tile\" onClick={() => {props.onClick(props.row, props.col, OCCUPIED)}} />\n  )\n}\n\nexport default Grass\n","import React, { Component } from 'react'\nimport { OCCUPIED } from '../shared/constants'\n\nclass Bomb extends Component {\n  constructor(props) {\n    super(props)\n\n    // browser caching breaks the animation, so we break the browser caching\n    var randomKey = Math.floor(Math.random() * 1000000).toString();\n\n    this.state = {\n      source: './explode.gif?' + randomKey\n    }\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({source: './grass.gif'})\n    }, 1000)\n  }\n\n  render() {\n    return (\n      <img src={this.state.source} className=\"tile\" onClick={() => {this.props.onClick(this.props.row, this.props.col, OCCUPIED)}} />\n    )\n  }\n}\n\nexport default Bomb\n","import { EMPTY, OCCUPIED, EXPLODED } from '../shared/constants'\n\nconst isAlive = (cell) => {\n  return (cell == OCCUPIED)\n}\nconst cell = (grid, row, col) => {\n  const size = grid.length;\n\n  if (col < 0) col = size-1;\n  if (col >= size) col = 0;\n\n  if (row < 0) row = size-1;\n  if (row >= size) row = 0;\n\n  return isAlive(grid[row][col]) ? 1 : 0\n}\n\nconst neighborCount = (grid, row, col) => {\n  return  cell(grid, row-1, col-1) +\n          cell(grid, row-1, col) +\n          cell(grid, row-1, col+1) +\n          cell(grid, row,   col-1) +\n          cell(grid, row,   col+1) +\n          cell(grid, row+1, col-1) +\n          cell(grid, row+1, col) +\n          cell(grid, row+1, col+1)\n}\n\nconst newCell = (grid, row, col) => {\n  const cell = grid[row][col]\n  const count = neighborCount(grid, row, col)\n\n  if (isAlive(cell)) {\n    return (count < 2 || count > 3) ? EXPLODED : OCCUPIED\n  } else {\n    return (count == 3) ? OCCUPIED : EMPTY\n  }\n}\n\nconst nextGrid = (originalGrid) => {\n  const grid = []\n  const rows = originalGrid.length\n  const cols = originalGrid[0].length\n\n  for (var row = 0; row < rows; row++) {\n    var fields = []\n\n    for (var col = 0; col < cols; col++) {\n      fields.push(newCell(originalGrid, row, col))\n    }\n\n    grid.push(fields)\n  }\n\n  return grid\n}\n\nexport default nextGrid","import React, { Component } from 'react'\nimport Bunny from './Bunny'\nimport Grass from './Grass'\nimport Bomb  from './Bomb'\nimport { EMPTY, OCCUPIED, EXPLODED } from '../shared/constants'\nimport { Button } from 'reactstrap'\nimport nextGrid from '../lib/grid'\n\nclass Main extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      grid: this.initialGrid()\n    }\n  }\n\n  initialGrid = () => {\n    return [\n      [EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY],\n      [EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY],\n      [EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY],\n      [EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY],\n      [EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY],\n      [EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY],\n      [EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY],\n      [EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY],\n      [EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY],\n      [EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY]\n    ]\n  }\n\n  copyGrid = (oldGrid) => {\n    var newGrid = []\n\n    for (var row = 0; row < oldGrid.length; row++) {\n      var fields = []\n\n      for (var col = 0; col < oldGrid[row].length; col++) {\n        fields.push(oldGrid[row][col])\n      }\n\n      newGrid.push(fields)\n    }\n\n    return newGrid\n  }\n\n  updateTile = (row, col, status) => {\n    const grid = this.copyGrid(this.state.grid)\n\n    grid[row][col] = status\n\n    this.setState({\n      grid: grid\n    })\n  }\n\n  tile = (row, col, status) => {\n    switch(status) {\n      case EMPTY:\n        return (<Grass row={row} col={col} onClick={this.updateTile} />)\n      case OCCUPIED:\n        return (<Bunny row={row} col={col} onClick={this.updateTile} />)\n      case EXPLODED:\n        return (<Bomb row={row} col={col} onClick={this.updateTile} />)\n      default:\n        return null;\n    }\n  }\n\n  rowTiles = (row, tiles) => {\n    return (\n      <div>\n        { tiles.map((status, col) => this.tile(row, col, status)) }\n      </div>\n    )\n  }\n\n  gridTiles = (rows) => {\n    return rows.map((row, index) => this.rowTiles(index, row))\n  }\n\n  nextGeneration = (event) => {\n    this.setState({\n      grid: nextGrid(this.state.grid)\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            { this.gridTiles(this.state.grid) }\n\n            <Button className=\"button-space\" color=\"primary\" onClick={this.nextGeneration}>See What Happens</Button>\n            <Button className=\"button-space\" color=\"secondary\" onClick={() => {this.setState({grid: this.initialGrid()})}}>Reset</Button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Main","import React, { Component } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nclass Explain extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      modal: false\n    };\n  }\n\n  toggle = () =>  {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"float-right\">\n        <Button color=\"secondary\" onClick={this.toggle}>{this.props.buttonLabel}</Button>\n        <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\n          <ModalHeader toggle={this.toggle}>Conway's Game of Life</ModalHeader>\n          <ModalBody>\n            <p>\n              This is the exploding bunny version of { ' ' }\n              <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\" target=\"_blank\">\n                Conway's Game of Life\n              </a>.\n            </p>\n\n            <p>\n              Click around the grassy field to add/remove bunnies. Then click \"see what happens\":\n            </p>\n\n            <ol>\n              <li>Bunnies that have 2-3 bunnies as neighbors survive.</li>\n              <li>Bunnies with too many or too few neighbors explode.</li>\n              <li>Empty spaces with exactly three bunnies as neighbors will spawn a new bunny.</li>\n            </ol>\n\n            <p>Still confused? This video will help!</p>\n\n            <video\n              src=\"https://dti6i5hz1tz1z.cloudfront.net/items/2C2r440X022y050r3E0Y/Screen%20Recording%202019-08-17%20at%2006.03%20PM.mov\"\n              controls\n              style={ { display: 'block', height: 'auto', width: '100%'} }\n            >\n              Exploding-Bunnies.mov\n            </video>\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"primary\" onClick={this.toggle}>Got It!</Button>\n          </ModalFooter>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default Explain;","import React from 'react';\nimport './App.css';\nimport { Navbar, NavbarBrand } from 'reactstrap';\nimport Main from './components/Main'\nimport Explain from './components/Explain'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar dark color=\"primary\">\n        <div className=\"container\">\n          <NavbarBrand href=\"/\">\n            <img src=\"./apple-icon.png\" className=\"header-icon\" />\n            Conway's Game of Exploding Bunnies\n          </NavbarBrand>\n\n          <Explain buttonLabel=\"How it Works\" />\n        </div>\n      </Navbar>\n\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}