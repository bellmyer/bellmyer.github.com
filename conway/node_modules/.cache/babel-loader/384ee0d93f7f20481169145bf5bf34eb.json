{"ast":null,"code":"import { EMPTY, OCCUPIED, EXPLODED } from '../shared/constants';\n\nconst isAlive = cell => {\n  return cell == OCCUPIED;\n};\n\nconst cell = (grid, row, col) => {\n  const size = grid.length;\n  if (col < 0) col = size - 1;\n  if (col >= size) col = 0;\n  if (row < 0) row = size - 1;\n  if (row >= size) row = 0;\n  return isAlive(grid[row][col]) ? 1 : 0;\n};\n\nconst neighborCount = (grid, row, col) => {\n  return cell(grid, row - 1, col - 1) + cell(grid, row - 1, col) + cell(grid, row - 1, col + 1) + cell(grid, row, col - 1) + cell(grid, row, col) + cell(grid, row, col + 1) + cell(grid, row + 1, col - 1) + cell(grid, row + 1, col) + cell(grid, row + 1, col + 1);\n};\n\nconst newCell = (grid, row, col) => {\n  const cell = grid[row][col];\n  const count = neighborCount(grid, row, col);\n\n  if (isAlive(cell)) {\n    return count < 2 || count > 3 ? EXPLODED : OCCUPIED;\n  } else {\n    return count == 3 ? OCCUPIED : EMPTY;\n  }\n};\n\nconst nextGrid = originalGrid => {\n  const grid = [];\n  const rows = originalGrid.length;\n  const cols = originalGrid[0].length;\n\n  for (var row = 0; row < rows; row++) {\n    var fields = [];\n\n    for (var col = 0; col < cols; col++) {\n      fields.push(newCell(originalGrid, row, col));\n    }\n\n    grid.push(fields);\n  }\n\n  return [...grid, grid[1]];\n};\n\nexport default nextGrid;","map":{"version":3,"sources":["/Users/bellmyer/Desktop/apps/coursera/react/conway/src/lib/grid.js"],"names":["EMPTY","OCCUPIED","EXPLODED","isAlive","cell","grid","row","col","size","length","neighborCount","newCell","count","nextGrid","originalGrid","rows","cols","fields","push"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,QAAhB,EAA0BC,QAA1B,QAA0C,qBAA1C;;AAEA,MAAMC,OAAO,GAAIC,IAAD,IAAU;AACxB,SAAQA,IAAI,IAAIH,QAAhB;AACD,CAFD;;AAGA,MAAMG,IAAI,GAAG,CAACC,IAAD,EAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,QAAMC,IAAI,GAAGH,IAAI,CAACI,MAAlB;AAEA,MAAIF,GAAG,GAAG,CAAV,EAAaA,GAAG,GAAGC,IAAI,GAAC,CAAX;AACb,MAAID,GAAG,IAAIC,IAAX,EAAiBD,GAAG,GAAG,CAAN;AAEjB,MAAID,GAAG,GAAG,CAAV,EAAaA,GAAG,GAAGE,IAAI,GAAC,CAAX;AACb,MAAIF,GAAG,IAAIE,IAAX,EAAiBF,GAAG,GAAG,CAAN;AAEjB,SAAOH,OAAO,CAACE,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,CAAD,CAAP,GAA0B,CAA1B,GAA8B,CAArC;AACD,CAVD;;AAYA,MAAMG,aAAa,GAAG,CAACL,IAAD,EAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACxC,SAAQH,IAAI,CAACC,IAAD,EAAOC,GAAG,GAAC,CAAX,EAAcC,GAAG,GAAC,CAAlB,CAAJ,GACAH,IAAI,CAACC,IAAD,EAAOC,GAAG,GAAC,CAAX,EAAcC,GAAd,CADJ,GAEAH,IAAI,CAACC,IAAD,EAAOC,GAAG,GAAC,CAAX,EAAcC,GAAG,GAAC,CAAlB,CAFJ,GAGAH,IAAI,CAACC,IAAD,EAAOC,GAAP,EAAcC,GAAG,GAAC,CAAlB,CAHJ,GAIAH,IAAI,CAACC,IAAD,EAAOC,GAAP,EAAcC,GAAd,CAJJ,GAKAH,IAAI,CAACC,IAAD,EAAOC,GAAP,EAAcC,GAAG,GAAC,CAAlB,CALJ,GAMAH,IAAI,CAACC,IAAD,EAAOC,GAAG,GAAC,CAAX,EAAcC,GAAG,GAAC,CAAlB,CANJ,GAOAH,IAAI,CAACC,IAAD,EAAOC,GAAG,GAAC,CAAX,EAAcC,GAAd,CAPJ,GAQAH,IAAI,CAACC,IAAD,EAAOC,GAAG,GAAC,CAAX,EAAcC,GAAG,GAAC,CAAlB,CARZ;AASD,CAVD;;AAYA,MAAMI,OAAO,GAAG,CAACN,IAAD,EAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAMH,IAAI,GAAGC,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,CAAb;AACA,QAAMK,KAAK,GAAGF,aAAa,CAACL,IAAD,EAAOC,GAAP,EAAYC,GAAZ,CAA3B;;AAEA,MAAIJ,OAAO,CAACC,IAAD,CAAX,EAAmB;AACjB,WAAQQ,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG,CAAtB,GAA2BV,QAA3B,GAAsCD,QAA7C;AACD,GAFD,MAEO;AACL,WAAQW,KAAK,IAAI,CAAV,GAAeX,QAAf,GAA0BD,KAAjC;AACD;AACF,CATD;;AAWA,MAAMa,QAAQ,GAAIC,YAAD,IAAkB;AACjC,QAAMT,IAAI,GAAG,EAAb;AACA,QAAMU,IAAI,GAAGD,YAAY,CAACL,MAA1B;AACA,QAAMO,IAAI,GAAGF,YAAY,CAAC,CAAD,CAAZ,CAAgBL,MAA7B;;AAEA,OAAK,IAAIH,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGS,IAAxB,EAA8BT,GAAG,EAAjC,EAAqC;AACnC,QAAIW,MAAM,GAAG,EAAb;;AAEA,SAAK,IAAIV,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGS,IAAxB,EAA8BT,GAAG,EAAjC,EAAqC;AACnCU,MAAAA,MAAM,CAACC,IAAP,CAAYP,OAAO,CAACG,YAAD,EAAeR,GAAf,EAAoBC,GAApB,CAAnB;AACD;;AAEDF,IAAAA,IAAI,CAACa,IAAL,CAAUD,MAAV;AACD;;AACD,SAAO,CAAC,GAAGZ,IAAJ,EAAUA,IAAI,CAAC,CAAD,CAAd,CAAP;AACD,CAfD;;AAiBA,eAAeQ,QAAf","sourcesContent":["import { EMPTY, OCCUPIED, EXPLODED } from '../shared/constants'\n\nconst isAlive = (cell) => {\n  return (cell == OCCUPIED)\n}\nconst cell = (grid, row, col) => {\n  const size = grid.length;\n\n  if (col < 0) col = size-1;\n  if (col >= size) col = 0;\n\n  if (row < 0) row = size-1;\n  if (row >= size) row = 0;\n\n  return isAlive(grid[row][col]) ? 1 : 0\n}\n\nconst neighborCount = (grid, row, col) => {\n  return  cell(grid, row-1, col-1) +\n          cell(grid, row-1, col) +\n          cell(grid, row-1, col+1) +\n          cell(grid, row,   col-1) +\n          cell(grid, row,   col) +\n          cell(grid, row,   col+1) +\n          cell(grid, row+1, col-1) +\n          cell(grid, row+1, col) +\n          cell(grid, row+1, col+1)\n}\n\nconst newCell = (grid, row, col) => {\n  const cell = grid[row][col]\n  const count = neighborCount(grid, row, col)\n\n  if (isAlive(cell)) {\n    return (count < 2 || count > 3) ? EXPLODED : OCCUPIED\n  } else {\n    return (count == 3) ? OCCUPIED : EMPTY\n  }\n}\n\nconst nextGrid = (originalGrid) => {\n  const grid = []\n  const rows = originalGrid.length\n  const cols = originalGrid[0].length\n\n  for (var row = 0; row < rows; row++) {\n    var fields = []\n\n    for (var col = 0; col < cols; col++) {\n      fields.push(newCell(originalGrid, row, col))\n    }\n\n    grid.push(fields)\n  }\n  return [...grid, grid[1]]\n}\n\nexport default nextGrid"]},"metadata":{},"sourceType":"module"}